// fonts
@if ($font--provider =='Google Fonts') {
	@import url('https://fonts.googleapis.com/css?family=#{$font--import}&display=swap');
}
@import "_illustrations";


*::-webkit-scrollbar-track {
	box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
	-webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
	background-color: #F5F5F5;
}

*::-webkit-scrollbar {
	width: 6px;
	background-color: #F5F5F5;
}

*::-webkit-scrollbar-thumb {
	background-color: #000000;
}
html {
	box-sizing: border-box;
	scroll-behavior: smooth;
}

*,
*:before,
*:after {
	/* Inherit box-sizing to make it easier to change the property for components that leverage other behavior; see http://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
	box-sizing: inherit;
}

body {
	background: color-bg(body);
	/* Fallback for when there is no custom background color defined. */
	-moz-osx-font-smoothing: grayscale;
	-webkit-font-smoothing: antialiased;
	overflow-x: hidden;
}

hr {
	border: 0;
	@include divider();
	margin-top: $spacing--shared-v;
	margin-bottom: $spacing--shared-v;
}

ul,
ol {
	margin-top: 0;
	padding-left: $spacing--shared-h;

	&:not(:last-child) {
		margin-bottom: $spacing--shared-v;
	}
}

ul {
	list-style: disc;
}

ol {
	list-style: decimal;
}

li {

	&:not(:last-child) {
		margin-bottom: $spacing--shared-v * 0.5;
	}
}

li>ul,
li>ol {
	margin-top: $spacing--shared-v * 0.5;
	margin-bottom: 0;
}

dl {
	margin-top: 0;
	margin-bottom: $spacing--shared-v;
}

dt {
	@include font-weight(strong);
}

dd {
	margin-left: $spacing--shared-h;
	margin-bottom: $spacing--shared-v;
}

img {
	border-radius: $img-radius;
}

img,
svg,
video {
	display: block;
	height: auto;
	/* Make sure images are scaled correctly. */
	max-width: 100%;
	/* Adhere to container width. */
}

figure {
	margin: $spacing--figure-v $spacing--figure-h;
	/* Extra wide images within figure tags don't overflow the content area. */
}

figcaption {
	padding: $spacing--figcaption-v $spacing--figcaption-h;
}

// tables
table {
	@include font-size(table);
	border-collapse: collapse;
	margin-bottom: $spacing--shared-v;
	width: 100%;
}

tr {
	border-bottom: 1px solid color-border(divider);
}

th {
	@include font-weight(strong);
	text-align: left;
}

th,
td {
	padding: $spacing--table-cell-v $spacing--table-cell-h;

	&:first-child {
		padding-left: 0;
	}

	&:last-child {
		padding-right: 0;
	}
}

.invert-color {

	hr {
		@include divider(false, inverse);
	}

	tr {
		border-bottom: 1px solid color-border(divider-inverse);
	}
}



.container,
.container-sm,
.container-xs {
	width: 100%;
	margin: 0 auto;
	padding-left: $container--padding__mobile;
	padding-right: $container--padding__mobile;

	@include media('>small') {
		padding-left: $container--padding__desktop;
		padding-right: $container--padding__desktop;
	}
}

.container {
	max-width: $container--width + ($container--padding__desktop * 2);
}

.container-sm {
	max-width: $container--width-sm + ($container--padding__desktop * 2);
}

.container-xs {
	max-width: $container--width-xs + ($container--padding__desktop * 2);
}

[class*=container] {

	[class*=container] {
		padding-left: 0;
		padding-right: 0;
	}

	.container-sm {
		max-width: $container--width-sm;
	}

	.container-xs {
		max-width: $container--width-xs;
	}
}


.header-nav-toggle {
	background: transparent;
	border: 0;
	outline: 0;
	padding: 0;
	cursor: pointer;
	position: fixed;
	right: 24px;
}

.hamburger,
.hamburger-inner {
	display: block;
	pointer-events: none;
}

.hamburger {
	position: relative;
	width: $header-hamburger--size;
	height: $header-hamburger--size;
}

.hamburger-inner,
.hamburger-inner::before,
.hamburger-inner::after {
	width: $header-hamburger--size;
	height: $header-hamburger--thickness;
	position: absolute;
	background: color-icon(hamburger);
	border-radius: $header-hamburger--radius;

	.invert-color & {
		background: color-icon(hamburger-inverse);
	}
}

.hamburger-inner {
	top: 50%;
	margin-top: -($header-hamburger--thickness * 0.5);
	transition-duration: 0.22s;
	transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);

	&::before,
	&::after {
		content: '';
		display: block;
	}

	&::before {
		top: -$header-hamburger--distance;
		transition: top 0.1s 0.25s ease-in, opacity 0.1s ease-in;
	}

	&::after {
		bottom: -$header-hamburger--distance;
		transition: bottom 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19), width 0.1s 0.25s ease-in;
	}

	.off-nav-is-active & {
		transform: rotate(225deg);
		transition-delay: 0.12s;
		transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);

		&::before {
			top: 0;
			opacity: 0;
			transition: top 0.1s ease-out, opacity 0.1s 0.12s ease-out;
		}

		&::after {
			width: $header-hamburger--size;
			bottom: 0;
			transform: rotate(-90deg);
			transition: bottom 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1), width 0.1s ease-out;
		}
	}
}


.button {
	display: inline-flex;
	@include font-size(button);
	@include font-weight(button);
	padding: (($button-form--height - get-line-height(button) - ($button-form--border-width * 2)) * 0.5) ($button--padding-h - $button-form--border-width);
	height: $button-form--height;
	text-decoration: none !important;
	text-transform: $button--transform;
	color: color(button-light);
	background-color: color-bg(button-light);
	border-width: $button-form--border-width;
	border-style: $button-form--border-style;
	border-color: color-border(button-light);
	border-radius: $button--radius;
	cursor: pointer;
	justify-content: center;
	text-align: center;
	letter-spacing: inherit;
	white-space: nowrap;
	transition: background .15s ease;

	&:active {
		outline: 0;
	}

	&:hover {
		background-color: color-bg(button-light-hover);
		border-color: color-border(button-light-hover);
	}

	&.is-loading {
		position: relative;
		color: transparent !important;
		pointer-events: none;

		&::after {
			content: '';
			display: block;
			position: absolute;
			width: get-line-height(button);
			height: get-line-height(button);
			margin-left: -(get-line-height(button) * 0.5);
			margin-top: -(get-line-height(button) * 0.5);
			top: 50%;
			left: 50%;
			border: $button-loading--thickness solid color(button-light);
			border-radius: 50%;
			border-right-color: transparent !important;
			border-top-color: transparent !important;
			z-index: 1;
			animation: button-loading .6s infinite linear;
		}
	}

	&[disabled] {
		cursor: not-allowed;
		color: color(button-disabled);
		background-color: color-bg(button-disabled) !important;
		border-color: color-border(button-disabled);

		&.is-loading {

			&::after {
				border-color: color(button-disabled);
			}
		}
	}
}

.button-sm {
	padding: (($button-form-sm--height - get-line-height(button) - ($button-form--border-width * 2)) * 0.5) ($button-sm--padding-h - $button-form--border-width);
	height: $button-form-sm--height;
}

.button-dark {
	color: color(button-dark);
	background-color: color-bg(button-dark);
	border-color: color-border(button-dark);

	&:hover {
		background-color: color-bg(button-dark-hover);
		border-color: color-border(button-dark-hover);
	}

	&.is-loading {

		&::after {
			border-color: color(button-dark);
		}
	}
}

.button-primary {
	color: color(button-primary);
	background-color: color-bg(button-primary);
	border-color: color-border(button-primary);

	&:hover {
		background-color: color-bg(button-primary-hover);
		border-color: color-border(button-primary-hover);
	}

	&.is-loading {

		&::after {
			border-color: color(button-primary);
		}
	}
}

.button-secondary {
	color: color(button-secondary);
	background-color: color-bg(button-secondary);
	border-color: color-border(button-secondary);

	&:hover {
		background-color: color-bg(button-secondary-hover);
		border-color: color-border(button-secondary-hover);
	}

	&.is-loading {

		&::after {
			border-color: color(button-secondary);
		}
	}
}

.button-block {
	display: flex;
	width: 100%;
}

.button-group {
	display: flex;
	flex-wrap: wrap;
	align-items: center;
	margin-right: -($button-group-padding * 0.5);
	margin-left: -($button-group-padding * 0.5);
	margin-top: -($button-group-padding * 0.5);

	&:last-of-type {
		margin-bottom: -($button-group-padding * 0.5);
	}

	&:not(:last-of-type) {
		margin-bottom: ($button-group-padding * 0.5);
	}

	>[class*=button] {
		margin: $button-group-padding * 0.5;
	}
}

@include media('<=medium') {

	.button-wide-mobile {
		width: 100%;
		max-width: $button--max-size-mobile;
	}
}

@keyframes button-loading {
	0% {
		transform: rotate(0);
	}

	100% {
		transform: rotate(360deg);
	}
}